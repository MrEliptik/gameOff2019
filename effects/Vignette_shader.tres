[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "// define shader type
shader_type canvas_item;

// Variable accessible outside of the shader
uniform float vignette_radius;

/*
https://math.stackexchange.com/questions/198764/how-to-know-if-a-point-is-inside-a-circle
The distance between ⟨xc,yc⟩ and ⟨xp,yp⟩ is given by the Pythagorean theorem as
d=(xp−xc)2+(yp−yc)2−−−−−−−−−−−−−−−−−−√.
The point ⟨xp,yp⟩ is inside the circle if d<r, on the circle if d=r, and outside the circle if d>r. You can save yourself a little work by comparing d2 with r2 instead: the point is inside the circle if d2<r2, on the circle if d2=r2, and outside the circle if d2>r2. Thus, you want to compare the number (xp−xc)2+(yp−yc)2 with r2.
*/

/*
Check if point is inside the circle
    Point to check: vec2 point
    Circle center: vec2 ccircle
    Circle radius: r
Return true if inside circle, false otherwise
*/
bool isInsideCircle(vec2 point, vec2 ccircle, float r){
    return (exp2(point.x-ccircle.x) + exp2(point.y-ccircle.y)) > exp2(r); 
}

void fragment(){
	// Put the input pixel in a variable
	vec2 uv = UV;
	
	// 0.5 because vignette is always at the center
	if(isInsideCircle(uv, vec2(0.5, 0.5), vignette_radius)){
	    // Pixel is kept the same
	    COLOR = texture(TEXTURE, uv);
		COLOR.rgb = vec3(0);
	} 
	else{
	    // Pixel is drawn black
	    // edit uv here and then put it back to
	    // the out variable COLOR
	    COLOR.rgb = vec3(0); // 0 black, 1 white
	}

}

	// Sample the texture
	//vec4 tex_color = texture(TEXTURE, UV);
	
	//float len = length(UV - vec2(0.5));

    //COLOR = vec4(tex_color.rgb * vec3(1.0 - len), 0.1);"

[resource]
shader = SubResource( 1 )
shader_param/vignette_radius = 0.6
